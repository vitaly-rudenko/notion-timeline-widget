{"version":3,"sources":["App.js","index.js"],"names":["DAY_MS","ALMOST_DAY_MS","notionColorsDark","default","gray","brown","orange","yellow","green","blue","purple","pink","red","isDatabaseItemValid","item","properties","multi_select","select","title","text","date","checkbox","App","useState","entries","setEntries","isFailed","setIsFailed","searchParams","URLSearchParams","window","location","search","databaseId","get","process","token","useEffect","fetch","method","headers","then","response","json","database","results","some","events","useMemo","map","console","log","JSON","stringify","scopes","s","name","color","scope","content","startDate","start","endDate","end","ongoing","flat","Set","event","chartSeries","join","data","x","y","Date","parse","now","Math","min","max","offset","className","type","width","height","options","chart","toolbar","offsetX","tools","download","selection","zoom","zoomin","zoomout","pan","customIcons","icon","class","index","click","reload","copyToClipboard","href","plotOptions","bar","horizontal","dataLabels","enabled","formatter","info","days","ceil","label","series","seriesIndex","colors","theme","palette","mode","xaxis","legend","show","stroke","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAKMA,EAAS,MACTC,EAAgBD,SAEhBE,EAAmB,CAYvBC,QAAS,UACTC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,KAAM,UACNC,IAAK,WAGP,SAASC,EAAoBC,GAC3B,OACGA,EAAKC,WAAL,MAAyBC,cAAgBF,EAAKC,WAAL,MAAyBE,SACnEH,EAAKC,WAAL,MAAyBG,OAASJ,EAAKC,WAAL,MAAyBG,MAAM,IAAMJ,EAAKC,WAAL,MAAyBG,MAAM,GAAGC,MACzGL,EAAKC,WAAL,KAAwBK,QACtBN,EAAKC,WAAL,SAA8BD,EAAKC,WAAL,QAA2BM,UAIxD,SAASC,IACd,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QACnDC,EAAaL,EAAaM,IAAI,gBAAkBC,GAChDC,EAAQR,EAAaM,IAAI,UAAYC,GAE3CE,qBAAU,WACHJ,GAAeG,GAEpBE,MAAM,GAAD,OACAH,2CADA,gDACiFF,EADjF,UAEH,CACEM,OAAQ,OACRC,QAAS,CACP,cAAgB,UAAhB,OAA2BJ,GAC3B,iBAAkB,gBAIrBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACAA,EAASC,SAAYD,EAASC,QAAQC,KAAKjC,GAKhDY,EAAWmB,EAASC,SAJlBlB,GAAY,QAMjB,CAACM,EAAYG,IAEhB,IAAMW,EAASC,mBAAQ,kBAAMxB,EAAQyB,KAAI,SAAAnC,GACvC,IAAKD,EAAoBC,GAEvB,OADAoC,QAAQC,IAAI,yBAA0BC,KAAKC,UAAUvC,EAAM,KAAM,IAC1D,GAGT,IAAMwC,EAASxC,EAAKC,WAAL,MAAyBC,aACpCF,EAAKC,WAAL,MAAyBC,aAAaiC,KAAI,SAAAM,GAAC,MAAK,CAChDC,KAAMD,EAAEC,KACRC,MAAOF,EAAEE,UAET,CAAC,CACDD,KAAM1C,EAAKC,WAAL,MAAyBE,OAAOuC,KACtCC,MAAO3C,EAAKC,WAAL,MAAyBE,OAAOwC,QAG3C,OAAOH,EAAOL,KAAI,SAAAS,GAAK,cAAK,CAC1BA,QACAJ,SACAE,KAAM1C,EAAKC,WAAL,MAAyBG,MAAM,GAAGC,KAAKwC,QAC7CC,UAAW9C,EAAKC,WAAL,KAAwBK,KAAKyC,MACxCC,QAAShD,EAAKC,WAAL,KAAwBK,KAAK2C,IACtCC,QAAO,oBAAElD,EAAKC,WAAL,eAAF,aAAE,EAA4BM,gBAA9B,gBAER4C,SAAQ,CAACzC,IAEN8B,EAASN,mBAAQ,8BAAU,IAAIkB,IACnCnB,EAAOE,KAAI,SAAAkB,GAAK,MAAK,CACnBX,KAAMW,EAAMT,MAAMF,KAClBC,MAAOU,EAAMT,MAAMD,cAEnB,CAACV,IAECqB,EAAcpB,mBAAQ,kBAAMD,EAAOE,KAAI,SAAAkB,GAAK,MAAK,CACrDX,KAAK,GAAD,OAAKW,EAAMX,KAAX,aAAoBW,EAAMb,OAAOL,KAAI,SAAAM,GAAC,OAAIA,EAAEC,QAAMa,KAAK,MAAvD,KACJC,KAAM,CAAC,CACLC,EAAGJ,EAAMT,MAAMF,KACfgB,EAAG,CACDC,KAAKC,MAAMP,EAAMP,WACjBO,EAAMH,QACDS,KAAKE,MAAQ1E,EACdkE,EAAML,QACHW,KAAKC,MAAMP,EAAML,SAAW7D,EAC5BwE,KAAKC,MAAMP,EAAMP,WAAa3D,WAGtC,CAAC8C,IAEN,EAAmBC,mBAAQ,iBAAM,CAC/B4B,KAAKC,IAAL,MAAAD,KAAI,YAAQR,EAAYnB,KAAI,SAAAM,GAAC,OAAIA,EAAEe,KAAK,GAAGE,EAAE,SAASC,KAAKE,MAAQ3E,EACnE4E,KAAKE,IAAL,MAAAF,KAAI,YAAQR,EAAYnB,KAAI,SAAAM,GAAC,OAAIA,EAAEe,KAAK,GAAGE,EAAE,SAASC,KAAKE,MAAQ3E,KAClE,CAACoE,IAHJ,mBAAOS,EAAP,KAAYC,EAAZ,KAKMC,GAAUD,EAAMD,GAAO,IAE7B,OAAK5C,GAAeG,EAIhBV,EACK,+EAGF,mCACL,cAAC,IAAD,CACEsD,UAAU,QACVC,KAAK,WACLC,MAAM,OACNC,OAAO,OACPC,QAAS,CACPC,MAAO,CACLC,QAAS,CACPC,QAAS,QACTC,MAAO,CACLC,UAAU,EACVC,WAAW,EACXC,MAAM,EACNC,QAAQ,EACRC,SAAS,EACTC,KAAK,EACLC,YAAa,CAAC,CACZC,KAAK,aAAD,OAAe7D,0BAAf,4BACJ8D,MAAO,cACPC,MAAO,EACPhF,MAAO,SACPiF,MAAO,kBAAMrE,OAAOC,SAASqE,WAC5B,CACDJ,KAAK,aAAD,OAAe7D,0BAAf,0BACJ8D,MAAO,cACPC,MAAO,EACPhF,MAAO,WACPiF,MAAO,kBAAME,IAAgBvE,OAAOC,SAASuE,YAKrDC,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBC,WAAY,CACVC,SAAS,EACTC,UAAW,WAAuBC,GAAU,IAAD,mBAA9BjD,EAA8B,KAAnBE,EAAmB,KACnCgD,EAAOlC,KAAKmC,MAAMjD,EAAUF,GAAa5D,GACzCgH,EAAQF,GAAQA,EAAO,EAAI,QAAU,QAErCG,EAAS7C,EAAYyC,EAAKK,aAChC,OAAOD,EAAM,UAAMA,EAAOzD,KAAb,aAAsBwD,GAAUA,IAGjDG,OAAQ7D,EAAOL,KAAI,SAAAM,GAAC,OAAIrD,EAAiBqD,EAAEE,UAC3C2D,MAAO,CACLC,QAAS,WACTC,KAAM,QAERC,MAAO,CACLtC,KAAM,WACNJ,IAAKA,EAAME,EACXD,IAAKA,EAAMC,GAEbyC,OAAQ,CACNC,MAAM,GAERC,OAAQ,CACNxC,MAAO,IAGX+B,OAAQ7C,MAxEH,kFC7HXuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.82e06dc8.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\nimport ApexChart from 'react-apexcharts'\nimport copyToClipboard from 'copy-to-clipboard'\nimport './App.css'\n\nconst DAY_MS = 24 * 60 * 60 * 1000\nconst ALMOST_DAY_MS = DAY_MS - 1\n\nconst notionColorsDark = {\n  // for light mode\n  // default: '#E6E6E5',\n  // gray: '#D7D7D6',\n  // brown: '#E5D8D0',\n  // orange: '#F9E1D4',\n  // yellow: '#F9EED8',\n  // green: '#D8E8E2',\n  // blue: '#D5E4F7',\n  // purple: '#DFD4F7',\n  // pink: '#F5D5E5',\n  // red: '#FBD6D5',\n  default: '#505558',\n  gray: '#6b6f71',\n  brown: '#695c55',\n  orange: '#917448',\n  yellow: '#9f904d',\n  green: '#487871',\n  blue: '#497088',\n  purple: '#6d5a90',\n  pink: '#924d75',\n  red: '#a05d59',\n}\n\nfunction isDatabaseItemValid(item) {\n  return (\n    (item.properties['Scope'].multi_select || item.properties['Scope'].select) &&\n    item.properties['Event'].title && item.properties['Event'].title[0] && item.properties['Event'].title[0].text &&\n    item.properties['Date'].date &&\n    (!item.properties['Ongoing'] || item.properties['Ongoing'].checkbox)\n  )\n}\n\nexport function App() {\n  const [entries, setEntries] = useState([])\n  const [isFailed, setIsFailed] = useState(false)\n\n  const searchParams = new URLSearchParams(window.location.search)\n  const databaseId = searchParams.get('database_id') || process.env.REACT_APP_TEST_DATABASE_ID\n  const token = searchParams.get('token') || process.env.REACT_APP_TEST_NOTION_INTEGRATION_TOKEN\n\n  useEffect(() => {\n    if (!databaseId || !token) return\n\n    fetch(\n      `${process.env.REACT_APP_CORS_EVERYWHERE_URL}/https://api.notion.com/v1/databases/${databaseId}/query`,\n      {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Notion-Version': '2021-08-16',\n        }\n      }\n    )\n      .then(response => response.json())\n      .then((database) => {\n        if (!database.results || !database.results.some(isDatabaseItemValid)) {\n          setIsFailed(true)\n          return\n        }\n\n        setEntries(database.results)\n      })\n  }, [databaseId, token])\n\n  const events = useMemo(() => entries.map(item => {\n    if (!isDatabaseItemValid(item)) {\n      console.log('Invalid database item:', JSON.stringify(item, null, 2))\n      return []\n    }\n\n    const scopes = item.properties['Scope'].multi_select\n      ? item.properties['Scope'].multi_select.map(s => ({\n        name: s.name,\n        color: s.color,\n      }))\n      : [{\n        name: item.properties['Scope'].select.name,\n        color: item.properties['Scope'].select.color,\n      }]\n\n    return scopes.map(scope => ({\n      scope,\n      scopes,\n      name: item.properties['Event'].title[0].text.content,\n      startDate: item.properties['Date'].date.start,\n      endDate: item.properties['Date'].date.end,\n      ongoing: item.properties['Ongoing']?.checkbox ?? false,\n    }))\n  }).flat(), [entries])\n\n  const scopes = useMemo(() => [...new Set(\n    events.map(event => ({\n      name: event.scope.name,\n      color: event.scope.color,\n    }))\n  )], [events])\n\n  const chartSeries = useMemo(() => events.map(event => ({\n    name: `${event.name} (${event.scopes.map(s => s.name).join(', ')})`,\n    data: [{\n      x: event.scope.name,\n      y: [\n        Date.parse(event.startDate),\n        event.ongoing\n          ? (Date.now() + ALMOST_DAY_MS)\n          : event.endDate\n            ? (Date.parse(event.endDate) + ALMOST_DAY_MS)\n            : (Date.parse(event.startDate) + ALMOST_DAY_MS)\n      ]\n    }]\n  })), [events])\n\n  const [min, max] = useMemo(() => [\n    Math.min(...chartSeries.map(s => s.data[0].y[0])) || (Date.now() - DAY_MS),\n    Math.max(...chartSeries.map(s => s.data[0].y[1])) || (Date.now() + DAY_MS),\n  ], [chartSeries])\n\n  const offset = (max - min) / 100\n\n  if (!databaseId || !token) {\n    return <div>Database ID and/or Notion token is not provided</div>\n  }\n\n  if (isFailed) {\n    return <div>The database is not supported by this widget</div>\n  }\n\n  return <>\n    <ApexChart\n      className=\"chart\"\n      type=\"rangeBar\"\n      width=\"100%\"\n      height=\"100%\"\n      options={{\n        chart: {\n          toolbar: {\n            offsetX: '-100%',\n            tools: {\n              download: false,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              customIcons: [{\n                icon: `<img src=\"${process.env.PUBLIC_URL}/reload.svg\" width=\"16\">`,\n                class: 'custom-icon',\n                index: 0,\n                title: 'Reload',\n                click: () => window.location.reload()\n              }, {\n                icon: `<img src=\"${process.env.PUBLIC_URL}/copy.svg\" width=\"16\">`,\n                class: 'custom-icon',\n                index: 0,\n                title: 'Copy URL',\n                click: () => copyToClipboard(window.location.href),\n              }]\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n          },\n        },\n        dataLabels: {\n          enabled: true,\n          formatter: ([startDate, endDate], info) => {\n            const days = Math.ceil((endDate - startDate) / DAY_MS)\n            const label = days + (days > 1 ? \" days\" : \" day\")\n\n            const series = chartSeries[info.seriesIndex]\n            return series ? `${series.name}: ${label}` : label\n          },\n        },\n        colors: scopes.map(s => notionColorsDark[s.color]),\n        theme: {\n          palette: 'palette1',\n          mode: 'dark',\n        },\n        xaxis: {\n          type: \"datetime\",\n          min: min - offset,\n          max: max + offset,\n        },\n        legend: {\n          show: false,\n        },\n        stroke: {\n          width: 5,\n        }\n      }}\n      series={chartSeries}\n    />\n  </>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}