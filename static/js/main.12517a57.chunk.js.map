{"version":3,"sources":["App.js","index.js"],"names":["DAY_MS","ALMOST_DAY_MS","notionColorsDark","default","gray","brown","orange","yellow","green","blue","purple","pink","red","App","useState","entries","setEntries","searchParams","URLSearchParams","window","location","search","databaseId","get","process","token","useEffect","fetch","method","headers","then","response","json","database","results","events","useMemo","map","item","scopes","properties","multi_select","s","name","color","scope","title","text","content","startDate","date","start","endDate","end","ongoing","checkbox","flat","Set","event","chartSeries","join","data","x","y","Date","parse","now","Math","min","max","offset","type","width","height","options","chart","toolbar","offsetX","tools","download","selection","zoom","zoomin","zoomout","pan","customIcons","icon","class","index","click","reload","plotOptions","bar","horizontal","dataLabels","enabled","formatter","info","days","ceil","label","series","seriesIndex","colors","theme","palette","mode","xaxis","legend","show","stroke","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12517a57.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\nimport ApexChart from 'react-apexcharts'\nimport './App.css'\n\nconst DAY_MS = 24 * 60 * 60 * 1000\nconst ALMOST_DAY_MS = DAY_MS - 1\n\nconst notionColorsDark = {\n  // for light mode\n  // default: '#E6E6E5',\n  // gray: '#D7D7D6',\n  // brown: '#E5D8D0',\n  // orange: '#F9E1D4',\n  // yellow: '#F9EED8',\n  // green: '#D8E8E2',\n  // blue: '#D5E4F7',\n  // purple: '#DFD4F7',\n  // pink: '#F5D5E5',\n  // red: '#FBD6D5',\n  default: '#505558',\n  gray: '#6b6f71',\n  brown: '#695c55',\n  orange: '#917448',\n  yellow: '#9f904d',\n  green: '#487871',\n  blue: '#497088',\n  purple: '#6d5a90',\n  pink: '#924d75',\n  red: '#a05d59',\n}\n\nexport function App() {\n  const [entries, setEntries] = useState([])\n\n  const searchParams = new URLSearchParams(window.location.search)\n  const databaseId = searchParams.get('database_id') || process.env.REACT_APP_TEST_DATABASE_ID\n  const token = searchParams.get('token') || process.env.REACT_APP_TEST_NOTION_INTEGRATION_TOKEN\n\n  useEffect(() => {\n    fetch(\n      `${process.env.REACT_APP_CORS_EVERYWHERE_URL}/https://api.notion.com/v1/databases/${databaseId}/query`,\n      {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Notion-Version': '2021-08-16',\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(database => setEntries(database.results))\n  }, [databaseId, token])\n\n  const events = useMemo(() => entries.map(item => {\n    const scopes = item.properties['Scope'].multi_select\n      .map(s => ({\n        name: s.name,\n        color: s.color,\n      }))\n\n    return scopes.map(scope => ({\n      scope,\n      scopes,\n      name: item.properties['Name'].title[0].text.content,\n      startDate: item.properties['Date'].date.start,\n      endDate: item.properties['Date'].date.end,\n      ongoing: item.properties['Ongoing']?.checkbox ?? false,\n    }))\n  }).flat(), [entries])\n\n  const scopes = useMemo(() => [...new Set(\n    events.map(event => ({\n      name: event.scope.name,\n      color: event.scope.color,\n    }))\n  )], [events])\n\n  const chartSeries = useMemo(() => events.map(event => ({\n    name: `${event.name} (${event.scopes.map(s => s.name).join(', ')})`,\n    data: [{\n      x: event.scope.name,\n      y: [\n        Date.parse(event.startDate),\n        event.ongoing\n          ? (Date.now() + ALMOST_DAY_MS)\n          : event.endDate\n            ? (Date.parse(event.endDate) + ALMOST_DAY_MS)\n            : (Date.parse(event.startDate) + ALMOST_DAY_MS)\n      ]\n    }]\n  })), [events])\n\n  const [min, max] = useMemo(() => [\n    Math.min(...chartSeries.map(s => s.data[0].y[0])) || (Date.now() - DAY_MS),\n    Math.max(...chartSeries.map(s => s.data[0].y[1])) || (Date.now() + DAY_MS),\n  ], [chartSeries])\n\n  const offset = (max - min) / 100\n\n  if (!databaseId || !token) {\n    return <div>Database ID and/or Notion token is not provided</div>\n  }\n\n  return <>\n    <ApexChart\n      type=\"rangeBar\"\n      width=\"100%\"\n      height=\"100%\"\n      options={{\n        chart: {\n          toolbar: {\n            offsetX: '-100%',\n            tools: {\n              download: false,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              customIcons: [{\n                icon: `<img src=\"${process.env.PUBLIC_URL}/reload.svg\" width=\"16\">`,\n                class: 'custom-icon',\n                index: 0,\n                title: 'Reload',\n                click: () => window.location.reload()\n              }, {\n                icon: `<img src=\"${process.env.PUBLIC_URL}/copy.svg\" width=\"16\">`,\n                class: 'custom-icon copy-url',\n                index: 0,\n                title: 'Copy URL',\n                click: () => { },\n              }]\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n          },\n        },\n        dataLabels: {\n          enabled: true,\n          formatter: ([startDate, endDate], info) => {\n            const days = Math.ceil((endDate - startDate) / DAY_MS)\n            const label = days + (days > 1 ? \" days\" : \" day\")\n\n            const series = chartSeries[info.seriesIndex]\n            return series ? `${series.name}: ${label}` : label\n          },\n        },\n        colors: scopes.map(s => notionColorsDark[s.color]),\n        theme: {\n          palette: 'palette1',\n          mode: 'dark',\n        },\n        xaxis: {\n          type: \"datetime\",\n          min: min - offset,\n          max: max + offset,\n        },\n        legend: {\n          show: false,\n        },\n        stroke: {\n          width: 5,\n        }\n      }}\n      series={chartSeries}\n    />\n  </>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}