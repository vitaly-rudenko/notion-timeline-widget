{"version":3,"sources":["App.js","index.js"],"names":["DAY_MS","ALMOST_DAY_MS","notionColorsDark","default","gray","brown","orange","yellow","green","blue","purple","pink","red","isDatabaseItemValid","item","properties","multi_select","select","title","text","date","checkbox","App","useState","entries","setEntries","isFailed","setIsFailed","widgetUrl","setWidgetUrl","searchParams","URLSearchParams","window","location","search","databaseId","get","process","token","width","height","setSize","useEffect","update","innerWidth","innerHeight","addEventListener","removeEventListener","fetch","method","headers","then","response","json","database","results","some","events","useMemo","map","console","log","JSON","stringify","name","content","scopes","s","color","scope","startDate","start","endDate","end","ongoing","group","flat","groupedEvents","Map","groupNames","Set","event","groupName","groupEvents","filter","e","set","chartSeries","Color","lightenByRatio","saturateByRatio","toCSS","data","fillColor","strokeColor","x","y","Date","parse","now","Math","min","max","offset","class","className","type","options","chart","toolbar","tools","download","selection","zoom","zoomin","zoomout","pan","customIcons","icon","index","click","reload","copyToClipboard","href","plotOptions","bar","horizontal","dataLabels","enabled","formatter","_","seriesIndex","dataPointIndex","days","ceil","duration","theme","palette","mode","xaxis","legend","show","labels","useSeriesColors","stroke","tooltip","custom","grid","borderColor","lines","yaxis","series","onSubmit","preventDefault","target","databaseUrl","value","split","pop","notionIntegrationToken","placeholder","defaultValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47a61bd3.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\nimport ApexChart from 'react-apexcharts'\nimport copyToClipboard from 'copy-to-clipboard'\nimport Color from 'color-js'\nimport './App.css'\n\nconst DAY_MS = 24 * 60 * 60 * 1000\nconst ALMOST_DAY_MS = DAY_MS - 1\n\nconst notionColorsDark = {\n  default: '#505558',\n  gray: '#6b6f71',\n  brown: '#695c55',\n  orange: '#917448',\n  yellow: '#9f904d',\n  green: '#487871',\n  blue: '#497088',\n  purple: '#6d5a90',\n  pink: '#924d75',\n  red: '#a05d59',\n}\n\nfunction isDatabaseItemValid(item) {\n  return (\n    (item.properties['Scope'].multi_select || item.properties['Scope'].select) &&\n    item.properties['Event'].title && item.properties['Event'].title[0] && item.properties['Event'].title[0].text &&\n    item.properties['Date'].date &&\n    (!item.properties['Ongoing'] || item.properties['Ongoing'].checkbox) &&\n    (!item.properties['Group'] || item.properties['Group'].select)\n  )\n}\n\nexport function App() {\n  const [entries, setEntries] = useState([])\n  const [isFailed, setIsFailed] = useState(false)\n  const [widgetUrl, setWidgetUrl] = useState('')\n\n  const searchParams = new URLSearchParams(window.location.search)\n  const databaseId = searchParams.get('database_id') || process.env.REACT_APP_TEST_DATABASE_ID\n  const token = searchParams.get('token') || process.env.REACT_APP_TEST_NOTION_INTEGRATION_TOKEN\n\n  const [[width, height], setSize] = useState([800, 300])\n\n  useEffect(() => {\n    const update = () => {\n      setSize([window.innerWidth, window.innerHeight])\n    }\n\n    update()\n    window.addEventListener('resize', update)\n    return () => window.removeEventListener('resize', update)\n  }, [])\n\n  useEffect(() => {\n    if (!databaseId || !token) return\n\n    fetch(\n      `${process.env.REACT_APP_CORS_EVERYWHERE_URL}/https://api.notion.com/v1/databases/${databaseId}/query`,\n      {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Notion-Version': '2021-08-16',\n        }\n      }\n    )\n      .then(response => response.json())\n      .then((database) => {\n        if (!database.results || !database.results.some(isDatabaseItemValid)) {\n          setIsFailed(true)\n          return\n        }\n\n        setEntries(database.results)\n      })\n  }, [databaseId, token])\n\n  const events = useMemo(() => entries.map(item => {\n    if (!isDatabaseItemValid(item)) {\n      console.log('Invalid database item:', JSON.stringify(item, null, 2))\n      return []\n    }\n\n    const name = item.properties['Event'].title[0].text.content\n    const scopes = item.properties['Scope'].multi_select\n      ? item.properties['Scope'].multi_select.map(s => ({\n        name: s.name,\n        color: s.color,\n      }))\n      : [{\n        name: item.properties['Scope'].select.name,\n        color: item.properties['Scope'].select.color,\n      }]\n\n    return scopes.map(scope => ({\n      scope,\n      scopes,\n      name,\n      startDate: item.properties['Date'].date.start,\n      endDate: item.properties['Date'].date.end,\n      ongoing: item.properties['Ongoing']?.checkbox ?? false,\n      group: {\n        name: item.properties['Group']?.select.name ?? scope.name,\n        color: item.properties['Group']?.select.color ?? scope.color,\n      }\n    }))\n  }).flat(), [entries])\n\n  const groupedEvents = useMemo(() => {\n    const map = new Map()\n\n    const groupNames = [...new Set(events.map(event => event.group.name))]\n\n    for (const groupName of groupNames) {\n      const groupEvents = events.filter(e => e.group.name === groupName)\n      map.set(groupEvents[0].group, groupEvents)\n    }\n\n    return map\n  }, [events])\n\n  const chartSeries = useMemo(() => [...groupedEvents.entries()].map(([group, events]) => {\n    return {\n      events,\n      name: group.name,\n      color: Color(notionColorsDark[group.color]).lightenByRatio(0.5).saturateByRatio(2).toCSS(),\n      data: events.map(event => ({\n        event,\n        fillColor: notionColorsDark[event.group.color],\n        strokeColor: Color(notionColorsDark[event.group.color]).lightenByRatio(0.5).toCSS(),\n        x: event.scope.name,\n        y: [\n          Date.parse(event.startDate),\n          event.ongoing\n            ? (Date.now() + ALMOST_DAY_MS)\n            : event.endDate\n              ? (Date.parse(event.endDate) + ALMOST_DAY_MS)\n              : (Date.parse(event.startDate) + ALMOST_DAY_MS),\n        ]\n      }))\n    }\n  }), [groupedEvents])\n\n  const [min, max] = useMemo(() => [\n    Math.min(...chartSeries.map(s => s.data[0].y[0])) || Date.now(),\n    Math.max(...chartSeries.map(s => s.data[0].y[1])) || Date.now(),\n  ], [chartSeries])\n\n  const offset = Math.max((max - min) / 100, DAY_MS * 7)\n\n  function handleSubmit(event) {\n    event.preventDefault()\n\n    const databaseUrl = event.target.databaseUrl.value\n    const databaseId = databaseUrl.split('/').pop().split('?')[0]\n\n    const notionIntegrationToken = event.target.notionIntegrationToken.value\n\n    const widgetUrl = `https://vitaly-rudenko.github.io/notion-timeline-widget/?database_id=${databaseId}&token=${notionIntegrationToken}`\n    setWidgetUrl(widgetUrl)\n\n    copyToClipboard(widgetUrl)\n  }\n\n  if (!databaseId || !token) {\n    return <div class=\"page\" onSubmit={handleSubmit}>\n      <form class=\"form\">\n        <div class=\"form-group\">\n          <label>Database URL</label>\n          <input type=\"text\" name=\"databaseUrl\" placeholder=\"https://www.notion.so/my-user/1790d3b3f05546f69989f10869398c19\" />\n        </div>\n\n        <div class=\"form-group\">\n          <label>Notion integration token</label>\n          <input type=\"text\" name=\"notionIntegrationToken\" placeholder=\"secret_DBaA6SzYK9bBcD5H7vCKS5mvJukYVsKG4CYfAcFCoRX\" defaultValue={token} />\n        </div>\n\n        <div class=\"buttons\">\n          <button type=\"submit\" class=\"button\">Create widget</button>\n        </div>\n      </form>\n\n      <input type=\"text\" class=\"result\" value={widgetUrl} placeholder=\"https://vitaly-rudenko.github.io/notion-timeline-widget/?database_id=1790d3b3f05546f69989f10869398c19&token=secret_DBaA6SzYK9bBcD5H7vCKS5mvJukYVsKG4CYfAcFCoRX\" />\n    </div>\n  }\n\n  if (isFailed) {\n    return <div class=\"page\">\n      <div class=\"title\">The database is not supported by this widget</div>\n    </div>\n  }\n\n  return <>\n    <ApexChart\n      className=\"chart\"\n      type=\"rangeBar\"\n      width={width - 40}\n      height={height - 40}\n      options={{\n        chart: {\n          toolbar: {\n            tools: {\n              download: false,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              customIcons: [{\n                icon: `<img src=\"${process.env.PUBLIC_URL}/reload.svg\" width=\"16\">`,\n                class: 'custom-icon',\n                index: 0,\n                title: 'Reload',\n                click: () => window.location.reload()\n              }, {\n                icon: `<img src=\"${process.env.PUBLIC_URL}/copy.svg\" width=\"16\">`,\n                class: 'custom-icon',\n                index: 0,\n                title: 'Copy URL',\n                click: () => copyToClipboard(window.location.href),\n              }]\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n          },\n        },\n        dataLabels: {\n          enabled: true,\n          formatter: (_, { seriesIndex, dataPointIndex }) => {\n            const event = chartSeries[seriesIndex].data[dataPointIndex].event\n\n            const [startDate, endDate] = chartSeries[seriesIndex].data[dataPointIndex].y || []\n            const days = Math.ceil((endDate - startDate) / DAY_MS)\n            const duration = ' (' + days + (days > 1 ? \" days\" : \" day\") + ')'\n\n            return event.name + (event.endDate ? duration : '')\n          },\n        },\n        theme: {\n          palette: 'palette1',\n          mode: 'dark',\n        },\n        xaxis: {\n          type: \"datetime\",\n          min: min - offset,\n          max: max + offset,\n        },\n        legend: {\n          show: true,\n          labels: {\n            useSeriesColors: true\n          },\n        },\n        stroke: {\n          width: 2,\n        },\n        tooltip: {\n          custom: ({ seriesIndex, dataPointIndex }) => {\n            const event = chartSeries[seriesIndex].data[dataPointIndex].event\n\n            const [startDate, endDate] = chartSeries[seriesIndex].data[dataPointIndex].y || []\n            const days = Math.ceil((endDate - startDate) / DAY_MS)\n            const duration = ' (' + days + (days > 1 ? \" days\" : \" day\") + ')'\n\n            return `<div class=\"chart__tooltip\">\n              <p class=\"chart__tooltip-primary-text\">${event.group.name}: ${event.name}${event.endDate ? duration : ''}</p>\n              <p class=\"chart__tooltip-secondary-text\">${event.startDate}${event.endDate ? ` - ${event.endDate}` : ''}</p>\n            </div>`\n          }\n        },\n        grid: {\n          show: true,\n          borderColor: '#FFFFFF22',\n          xaxis: {\n            lines: {\n              show: true\n            }\n          },\n          yaxis: {\n            lines: {\n              show: true\n            }\n          },\n        }\n      }}\n      series={chartSeries}\n    />\n  </>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}